(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{387:function(t,a,s){"use strict";s.r(a);var n=s(51),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"getting-started"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[t._v("#")]),t._v(" Getting started")]),t._v(" "),s("p",[t._v('I tried to make the library as versatile as possible while keeping it as simple as possible.\nYou can always take a look into the "Example" directory in the repository to get an overview over all options in action.')]),t._v(" "),s("h2",{attrs:{id:"root-locations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#root-locations"}},[t._v("#")]),t._v(" Root locations")]),t._v(" "),s("p",[t._v('This package is designed to work either in combination or as a standalone plugin system.\nSadly, this means we have to crunch a bit of boring theory before we can start with setting everything up.\nIn your project you will probably have a directory called "plugins" (or something similar), where\nall your plugins reside (presumably each in their own directory). In that case\nyour directory structure might look like this:')]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- src\n  - Classes\n    - ... [project classes]\n  - Config\n    - ... [project config]\n  - Plugins\n    - Plugin1\n        - Config\n            - ... [config classes]\n        - Handlers\n            - ... [handler classes]\n        - ... [plugin sources]\n    - Plugin2\n        - Config\n            - ... [config classes]\n        - Handlers\n            - ... [handler classes]\n        - ... [plugin sources]\n")])])]),s("p",[t._v('The directory where the plugin sources are stored (/src/Plugins/Plugin1 and /src/Plugins/Plugin2),\nare the so called "RootLocations". Those folders should be traversed by the configuration loader\nto find the available configuration classes.')]),t._v(" "),s("p",[t._v('::: info\nNote, that we did not define a /Config directory but simply use the base plugin directory.\nIt will become clear why we do this in the "handlers" section.\n:::')]),t._v(" "),s("p",[t._v("Another example for a root location is the configuration of the project itself,\nthis is where you or your user will be able to configure installed plugins or framework options.\nTo achieve the project configuration we have to register an additional root location at /src.")]),t._v(" "),s("p",[t._v("This means we have currently three root locations to register:")]),t._v(" "),s("ul",[s("li",[t._v("/src/Plugins/Plugin1")]),t._v(" "),s("li",[t._v("/src/Plugins/Plugin2")]),t._v(" "),s("li",[t._v("/src")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("The order is important here, because that means that the config of both plugins will be loaded before the app config is loaded.")])]),t._v(" "),s("p",[t._v("So far, so good? Now lets jump into the action.")]),t._v(" "),s("h2",{attrs:{id:"basic-setup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-setup"}},[t._v("#")]),t._v(" Basic setup")]),t._v(" "),s("p",[t._v("First of all include the composer autoloader (if not done by your framework/app already):")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("__DIR__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'/vendor/autoload.php'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),s("p",[t._v("Now let's create the configuration loader instance.\nThe configuration loader is the repository to load the configuration.")]),t._v(" "),s("p",[t._v("It requires two arguments:")]),t._v(" "),s("ul",[s("li",[t._v("$type: A unique type key for this configuration, so we don't\ncreate an overlap when different configurations are loaded.")]),t._v(" "),s("li",[t._v('$environment Something like "dev"/"prod"/"stage" or similar to\ndescribe your current environment.')])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Loader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Loader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$loader")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Loader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'dev'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),s("p",[t._v("Next up we have to tell the loader where its root locations are.")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @var \\Neunerlei\\Configuration\\Loader\\Loader $loader */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register all plugin directories using a glob")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$loader")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerRootLocation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'/src/Plugins/*'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Register the project root directory")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$loader")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerRootLocation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'/src'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),s("p",[t._v('Now, as a last step, we have to tell the loader, where it can find handler classes.\nFollowing our example, we have to look inside the "Handler" directory of each plugin folder in order to find handlers,\nand so it\'s as simple as that:')]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @var \\Neunerlei\\Configuration\\Loader\\Loader $loader */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Relative paths will be resolved, relative to all root locations.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$loader")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerHandlerLocation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Handlers'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),s("p",[t._v("Finally, we load the configuration:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @var \\Neunerlei\\Configuration\\Loader\\Loader $loader */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$state")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$loader")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_r")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$state")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("After your configuration has been loaded from your configuration class the result will be an object of type:\n"),s("code",[t._v("\\Neunerlei\\Configuration\\State\\ConfigState")]),t._v(" which contains the combined information from all plugins and your project\nconfiguration. You can use its get() and set() methods to retrieve or update the data to your liking.\nIn its core, the state object is a multi-dimensional array which allows you to store any kind of data.")])]),t._v(" "),s("p",[t._v("Well, that's that, but now what? The result of the print_r will be an empty array. This isn't helpful, isn't it?\nTo get a more sensible output, we have to create a handler first, and a configuration class after that.")]),t._v(" "),s("h2",{attrs:{id:"creating-your-first-handler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-your-first-handler"}},[t._v("#")]),t._v(" Creating your first handler")]),t._v(" "),s("p",[t._v("A handler is the class which tells the configuration loader which type of classes it can process and where\nto look for them, inside your root locations. It is also used to pass the configurator through all found\nconfiguration classes and push the gathered information into the ConfigState object, when done.")]),t._v(" "),s("p",[t._v('Before you can begin configuring your code you have to create a handler class, and a matching configurable interface.\nLet\'s assume we want to create a config handler for Plugin1 in our example above.\nSo we create a new class inside the /src/Plugins/Plugin1/Handlers directory and call it: "ConfigureTestHandler".')]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("p",[t._v("A handler has to either implement the "),s("code",[t._v("Neunerlei\\Configuration\\Handler\\ConfigHandlerInterface")]),t._v(" interface,\nor extend the "),s("code",[t._v("Neunerlei\\Configuration\\Handler\\AbstractConfigHandler")]),t._v(" class. I would always use the second option.\nSo let's extend the handler and add the stubs for the required methods of the interface:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("HandlerConfigurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("configure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name type-declaration"}},[t._v("HandlerConfigurator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$configurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("prepare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword type-hint"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("finish")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("p",[t._v("As you can see, there are four methods that have to be implemented by a handler. Before we look at those\nmethods in detail, we create our configurator and configurable interface.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Context")]),t._v(" "),s("p",[t._v("You may use the $this->context property in your handler, to get the state or runtime information,\nwhich will be automatically injected into your instance.")])]),t._v(" "),s("h2",{attrs:{id:"configurator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configurator"}},[t._v("#")]),t._v(" Configurator")]),t._v(" "),s("p",[t._v("A configurator is optional while writing a handler, but highly recommended. The configurator object is, in general\nthe speaking API which will be passed through configuration classes and is used to gather the data. The main\nreason to create a configurator is, to tell the world what can be configured and how,\nbecause the configuration implementation is, completely agnostic to the type of data you create with it.")]),t._v(" "),s("p",[t._v("This approach allows you to gather information from multiple plugins and process them after all data has been\ngathered. It also serves as an auto-complete friendly setter for the ConfigState object, if you don't require\nadditional processing for your configuration.")]),t._v(" "),s("p",[t._v("A configurator class can be complex, or as simple as the following example:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("State"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestConfigurator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * A generic config option\n     * @var string $myOption\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$myOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Sets a generic config option\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("setMyOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword type-hint"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$myOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("myOption")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$myOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n     * This method is optional, we will use it in our handler\n     * to extract the collected data of this configurator after all\n     * configuration classes have been processed. This pattern allows you to "post-process" the\n     * data before it is set to the state.\n     *\n     * Note: If you don\'t want or need that extra layer of processing,\n     * you can also set the data directly to the state in your setter methods.\n     *\n     * @see \\Neunerlei\\Configuration\\Util\\ConfigContextAwareInterface\n     * @see \\Neunerlei\\Configuration\\Util\\ConfigContextAwareTrait\n     */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("finish")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name type-declaration"}},[t._v("ConfigState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$state")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'myOption'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("myOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("h3",{attrs:{id:"alternative-configurator-architecture"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#alternative-configurator-architecture"}},[t._v("#")]),t._v(" Alternative configurator architecture")]),t._v(" "),s("p",[t._v("Alternatively, in this example you could go the easy route of directly setting the state data.\nHowever, in my experience this is not your normal use case, hence I wanted to show you how to manage bigger configurations from the beginning.\nFor completeness, this would be the alternative in the simple setup above:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigContextAwareInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigContextAwareTrait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestConfigurator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigContextAwareInterface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("ConfigContextAwareTrait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Sets a generic config option\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("setMyOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword type-hint"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$myOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("context")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'myOption'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$myOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("If you implement the ConfigContextAwareInterface for a class, the internal dependency injection handler\nwill make sure to provide the config context when a new instance is created.")])]),t._v(" "),s("h2",{attrs:{id:"configurable-interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configurable-interface"}},[t._v("#")]),t._v(" Configurable interface")]),t._v(" "),s("p",[t._v("To map a certain configuration class to a handler object the handler defines one, or multiple interfaces\nit can process. All classes with the registered interfaces will be processed by the handler.\nIf multiple handlers can process the same interface, the configuration class will be handled by all of them.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v('In order to make configurable interfaces easy to find you should start their name with "Configure..." and then\nwrite WHAT the interface allows you to configure. (e.g ConfigureHttpInterface, ConfigureMiddlewaresInterface,...).')])]),t._v(" "),s("p",[t._v("A simple, but common interface looks like this:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestInterface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Configures some part of your application\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("configure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name type-declaration"}},[t._v("ConfigureTestConfigurator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$configurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("p",[t._v('As you can see, the interface only defines a single method called "configure()". The method will receive\nthe configurator instance. Every configuration class has to implement this interface, and therefore\ncan inherit the "configure()" method, including the auto-completion type hint for your configurator object.')]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("It's up to you, and your requirements on how the interface should look like.\nYour handler decides what you want to do with the information, that was collected by the configurator,\nthe configurable interface only tells the user what they can expect from them.")])]),t._v(" "),s("p",[t._v("But, before we get ahead of ourselves, let's take a look at the methods in a handler class:")]),t._v(" "),s("h3",{attrs:{id:"configure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure"}},[t._v("#")]),t._v(" configure()")]),t._v(" "),s("p",[t._v("The configure() method is used to tell the config loader about your handler. It allows your handler to provide\ninformation about where it finds its contents, on which interfaces it listens,\nor the order in which it should be executed. It is called once, when the loader gathers the handler information.")]),t._v(" "),s("p",[t._v('You can use the given $configurator to tell the loader that our handler should look inside the "Config" directory,\nrelative to the registered root locations in order to find its configuration classes. We also tell the loader,\nit should find only configurations which implement the '),s("code",[t._v("Example\\Plugins\\Plugin1\\Handlers\\ConfigureTestInterface")]),t._v("\ninterface for this handler.")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?")]),t._v("php"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @noinspection ALL */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigureTestInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("HandlerConfigurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("configure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name type-declaration"}},[t._v("HandlerConfigurator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$configurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Tell the loader to look inside the "Config" directory of each registered root location.')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$configurator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerLocation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Config'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Tell the loader for which interface it should look there.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$configurator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("ConfigureTestInterface")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... other methods")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("h3",{attrs:{id:"prepare"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prepare"}},[t._v("#")]),t._v(" prepare()")]),t._v(" "),s("p",[t._v("After the loader resolved the list of configuration classes for your handler, the prepare() method is called once.\nIn this example, we use the method as a hook to create our configurator instance.")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?")]),t._v("php"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @noinspection ALL */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigureTestConfigurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$configurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("prepare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note how we create the configurator instance using the built-in getInstance() method.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// it will automatically try to create the instance using the (optional) PSR container implementation")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or create the instance itself if no container was given")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("configurator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name static-context"}},[t._v("ConfigureTestConfigurator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... other methods")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("h3",{attrs:{id:"handle-string-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handle-string-class"}},[t._v("#")]),t._v(" handle(string $class)")]),t._v(" "),s("p",[t._v('The handle method will be called once for every configuration class, and will receive the name\nof that class as a parameter. Your handler can decide freely what it does with the name of the class.\nIn our example, where we defined the "configure()" method as static in our configurable interface,\nits job is fairly simple: execute the static method and pass it the configurator object.')]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?")]),t._v("php"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @noinspection ALL */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigureTestConfigurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword type-hint"}},[t._v("string")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call_user_func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'configure'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("configurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... other methods")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("h3",{attrs:{id:"finish"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#finish"}},[t._v("#")]),t._v(" finish()")]),t._v(" "),s("p",[t._v("After all configuration classes have been processed in the handle() method the finish() method is called once.\nHere, the handler can apply post-processing, emit events or whatever you need to do.\nIn our example what we want is to inherit the information from the configurator and store it in the state\nobject.")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?")]),t._v("php"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @noinspection ALL */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Neunerlei"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Configuration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigureTestConfigurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("ConfigureTestHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractConfigHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("finish")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We retrieve the state object from the context and pass it to the configurator's finish method.")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The configurator itself will then store the collected information on the state")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("configurator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finish")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("context")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... other methods")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("h2",{attrs:{id:"writing-a-configuration-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writing-a-configuration-class"}},[t._v("#")]),t._v(" Writing a configuration class")]),t._v(" "),s("p",[t._v('Now, after all that setup, let\'s create a configuration and see how it works.\nIf we look back at the directory structure in the "Root locations" section we see,\nthat there are multiple directories called "Config". Inside our handler class implementation we told the\nconfig finder, that it should look inside the "Config" directory of all root locations in order to resolve\npotential target classes.')]),t._v(" "),s("p",[t._v("So, we start by creating a new class at /src/Plugins/Plugin1/Config:")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("PluginTestConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("p",[t._v("In order to register the class as configuration we have to implement the configuration interface.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v('If you follow the naming suggestion, by beginning your configurable interface with "Configure...",\nyou will be able to see a list of all configurable interfaces when you start typing: '),s("code",[t._v("...Config implements Configure|")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigureTestInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("PluginTestConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigureTestInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v('If you are using PHPStorm you can now right-click on the interface, select "Show Context Actions" and "Add method stubs"\nto create the method required by the contract.')])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigureTestInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token package"}},[t._v("Example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Plugin1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Handlers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("ConfigureTestConfigurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("PluginTestConfig")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigureTestInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Configures some part of your application\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("configure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name type-declaration"}},[t._v("ConfigureTestConfigurator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$configurator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use the configurator to fill the registered property")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$configurator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMyOption")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'plugin option'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),s("p",[t._v("Now, back in our example above, here you should now see an output of "),s("code",[t._v("['myOption' => 'plugin option']")]),t._v("\nafter you let your code run again.")]),t._v(" "),s("p",[t._v("Pretty neat, but a lot of code to write a single entry in an array. So, why would I ever do it like this?\nI'm glad you asked, so with the basic principles out of the way, take a look at some nifty stuff like:")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/guide/ConfigState.html"}},[t._v("Config State")])],1),t._v(" "),s("li",[t._v("Inheritance and overrides")]),t._v(" "),s("li",[t._v("Handler overrides and config extension")]),t._v(" "),s("li",[t._v("Config modifiers")]),t._v(" "),s("li",[t._v("Dependency injection")]),t._v(" "),s("li",[t._v("Caching and runtime handling")]),t._v(" "),s("li",[t._v("Namespacing")]),t._v(" "),s("li",[t._v("Events")]),t._v(" "),s("li",[t._v("Loader extensions")])])])}),[],!1,null,null,null);a.default=e.exports}}]);